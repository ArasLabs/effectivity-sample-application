<AML>
 <Item type="Method" id="A7BACAF555924D17AFE1EDFCA0BFD07E" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[//MethodTemplateName=CSharp:Aras.Server.Core.Configurator;
		private List<string> _dependsOnIds = new List<string>();
		private Item _cachedScopeItem;

		private Item EffectivityScopeItem
		{
			get
			{
				if (_cachedScopeItem == null)
				{
					string effsScopeId = ScopeItem.getID();
					Item scopeVariablesRelationships = ScopeItem.newItem("effs_sample_Scope_Variables", "get");
					scopeVariablesRelationships.setAttribute("select", "related_id");

					Item effsScope = ScopeItem.newItem("effs_scope", "get");
					effsScope.setID(effsScopeId);
					effsScope.setAttribute("select", "name");
					effsScope.addRelationship(scopeVariablesRelationships);
					effsScope = effsScope.apply();

					if (effsScope.isError())
					{
						throw new InnovatorServerException(effsScope.getErrorString());
					}

					_cachedScopeItem = effsScope;
				}

				return _cachedScopeItem;
			}
		}

		public override Scope BuildScope()
		{
			string effsScopeId = ScopeItem.getID();
			_dependsOnIds.Add(effsScopeId);
			Scope scope = new Scope() { Id = effsScopeId, Name = EffectivityScopeItem.getProperty("name") };
			AddVariablesToScope(scope);
			return scope;
		}

		private void AddVariablesToScope(Scope scope)
		{
			Item scopeVariablesRelationships = EffectivityScopeItem.getRelationships("effs_sample_Scope_Variables");
			int variablesCount = scopeVariablesRelationships.getItemCount();

			for (int i = 0; i < variablesCount; i++)
			{
				Item scopeVariableRelationship = scopeVariablesRelationships.getItemByIndex(i);
				_dependsOnIds.Add(scopeVariableRelationship.getID());
				
				Item effectivityVariable = scopeVariableRelationship.getRelatedItem();
				string effectivityVariableId = effectivityVariable.getID();
				_dependsOnIds.Add(effectivityVariableId);

				string variableName = effectivityVariable.getProperty("name");
				string variableType = effectivityVariable.getProperty("variable_type").ToLowerInvariant();
				bool isListVariable = string.Equals(variableType, "list", StringComparison.Ordinal);

				if (isListVariable)
				{
					Dictionary<string, string> namedConstants = new Dictionary<string, string>();
					string enumId = GetEnumerationFromListValues(namedConstants, effectivityVariable);

					if (!string.IsNullOrEmpty(enumId))
					{
						_dependsOnIds.Add(enumId);

						Aras.Server.Core.Configurator.Enum variableEnum = new Aras.Server.Core.Configurator.Enum(DataType.String) { Name = enumId, Id = enumId };
						foreach (KeyValuePair<string, string> namedConstant in namedConstants)
						{
							string namedConstantId = namedConstant.Key;
							_dependsOnIds.Add(namedConstantId);
							variableEnum.AddNamedConstant(namedConstantId, namedConstant.Value, namedConstant.Value);
						}
						scope.VariableList.Add(new Variable(variableEnum.DataType) { Enum = variableEnum, Name = variableName, Id = effectivityVariableId });
					}
				}
				else
				{
					DataType? dataType = GetVariableDataType(variableType);
					scope.VariableList.Add(new Variable(dataType) { Enum = null, Name = variableName, Id = effectivityVariableId });
				}
			}
		}

		private string GetEnumerationFromListValues(Dictionary<string, string> namedConstants, Item effectivityVariable)
		{
			string listID = effectivityVariable.getProperty("list_id");
			if (!string.IsNullOrEmpty(listID))
			{
				Item listValues = ScopeItem.newItem("Value", "get");
				listValues.setAttribute("select", "label,value");
				listValues.setProperty("source_id", listID);
				listValues = listValues.apply();

				if (listValues.isError() && !string.Equals(listValues.getErrorCode(), "0", StringComparison.Ordinal))
				{
					throw new InnovatorServerException(listValues.getErrorString());
				}

				int itemsCount = listValues.getItemCount();
				for (int j = 0; j < itemsCount; j++)
				{
					Item listValue = listValues.getItemByIndex(j);
					string namedConstantId = listValue.getID();
					if (!string.Equals(listValue.getProperty("value"), namedConstantId, StringComparison.Ordinal))
					{
						Item editListValue = ScopeItem.newItem("Value", "edit");
						editListValue.setID(namedConstantId);
						editListValue.setProperty("value", namedConstantId);
						editListValue = editListValue.apply();
						if (editListValue.isError())
						{
							throw new InnovatorServerException(editListValue.getErrorString());
						}
					}
					namedConstants.Add(namedConstantId, listValue.getProperty("label"));
				}
				return listID;
			}
			return null;
		}

		private DataType? GetVariableDataType(string variableType)
		{
			DataType? dataType = null;

			switch (variableType)
			{
				case "date":
					dataType = DataType.DateTime;
					break;
				case "integer":
					dataType = DataType.Int;
					break;
				case "string":
					dataType = DataType.String;
					break;
			}

			return dataType;
		}

		public override ArrayList GetCustomKey()
		{
			return new ArrayList {
				ScopeItem.getID(),
			};
		}

		public override string[] GetGuidsItemDependsOn()
		{
			return _dependsOnIds.ToArray();
		}

		public override List<string> GetItemTypeNamesItemDependsOn()
		{
			return new List<string> { "effs_scope", "effs_sample_Scope_Variables", "effs_sample_EffVariable", "List", "Value" };
		}]]></method_code>
  <method_type>C#</method_type>
  <name>effs_sample_scope_builder</name>
 </Item>
</AML>